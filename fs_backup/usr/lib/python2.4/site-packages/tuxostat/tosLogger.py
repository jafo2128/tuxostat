# tos-logger
# tuxOstat syslog logging class
# this handles all of the log output from tuxOstat
# TuxOstat - Linux-based thermostat <http://www.jasonantman.com>
# Copyright 2008 Jason Antman. <jason@jasonantman.com>.
# Licensed under Version 3 or later of the GNU GPL.
#  Time-stamp: "2008-06-25 19:08:13 tuxostat"
#  $Id: tosLogger.py,v 1.1.1.7 2008/10/09 00:21:48 jantman Exp $

import syslog
import _mysql
import time

class tosLogger:
    """
    This class handles all tuxOstat logging via syslog and MySQL. It does so in a unified way.
    """

    facility = syslog.LOG_LOCAL6 # CONFIG: facility to log as
    # by default, we'll use LOG_LOCAL6
    # Syslog is configured to dump this to /var/log/tuxostat

    def MySQLLogStateChange(self, type, taskID, system, runType):
        """
        Handles logging state change data to MySQL.
        @param type (int) - 0 for stop, 1 for run, 2 for run fail - too soon to start compressor
        @param taskID (int) - the schedule taskID
        @param system (string) - "ac" | "fan" | "heat"
        @param runType (string) - "schedule" | "sched override" | "man override"
        """
        db=_mysql.connect(db="tuxostat")
        query = "INSERT INTO runlog SET timestamp="+str(time.time())+",type="+str(type)+",task="+str(taskID)+",system=\""+system+"\",runType=\""+runType+"\";"
        db.query(query)

    def MySQLLogRelays(self, state0, state1, state2):
        """
        Log the state of the relays
        """
        val0 = 0
        val1 = 0
        val2 = 0
        
        if state0 is True:
            val0 = 1

        if state1 is True:
            val1 = 1

        if state2 is True:
            val2 = 1
            
        db=_mysql.connect(db="tuxostat")
        query = "INSERT INTO relaylog SET timestamp="+str(time.time())+",state0="+str(val0)+",state1="+str(val1)+",state2="+str(state2)+";"
        db.query(query)

    def log(self, parent, level, s):
        """
        This writes the text 's' to syslog as log level 'level'. It will always write to the facility specified by the class constant 'facility'.
        @param parent - the parent, for use in generating log messages
        @param s string - the string to log
        @param level integer - one of:
        7 - DEBUG
        6 - INFO
        5 - NOTICE
        4 - WARNING
        3 - ERR
        2 - CRIT
        1 - ALERT
        0 - EMERG
        """

        # translate level nubmers to text for the message
        levels = {0: "EMERG", 1: "ALERT", 2: "CRIT", 3: "ERR", 4: "WARN", 5: "NOTICE", 6: "INFO", 7: "DEBUG"}

        # this is a bit of a hack to get the calling class and function names
        #<__main__.tosTester instance at 0xb7d0c48c>
        if parent is not None:
            nameStr = str(parent)
            nameStr = nameStr[1:nameStr.find(" ")]
            nameStr = nameStr.split(".")
            # add the calling class and function name
            s = nameStr[1]+"("+nameStr[0]+")"+": "+s
        else:
            s = "<CLI app>: "+s
        # add the level
        s = levels[level]+": "+s

        syslog.syslog(level | self.facility, s)
