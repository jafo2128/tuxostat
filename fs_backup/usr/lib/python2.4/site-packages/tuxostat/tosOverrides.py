# config.py
#  TuxOstat schedule overrides
# TuxOstat - Linux-based thermostat <http://www.jasonantman.com>
# Copyright 2008 Jason Antman. <jason@jasonantman.com>.
# Licensed under Version 3 or later of the GNU GPL.
#  Time-stamp: "2008-06-11 20:07:25 tuxostat"
#  $Id: tosOverrides.py,v 1.1.1.3 2008/06/12 00:10:31 jantman Exp $

import cPickle as pickle
import shutil
import time
import os.path

from tuxostat.tosSched import tosSched
from tuxostat.tosZones import tosZones as tosZones
from tuxostat.tosLogger import tosLogger

class tosOverrides:
    """
    This class handles all reading, creation, editing, and removal of overrides.

    MAJOR DATA STRUCTURES:
    manOverride = dictionary like StartTS: <int ts>, EndTS: <int ts>, TempF: <float tempF>
       endTS should probably be a time before the next schedule task
       tempF is the temp to keep everything at
    schedOverrides = a list of dictionaries like the tasks in tosSched, but instead of Date and Time, it has integer StartTS and EndTS.
    """

    MAN_OVER_FILE = "/var/local/tuxostat/man_override.pkl"
    SCHED_OVER_FILE = "/var/local/tuxostat/sched_override.pkl"
    SCHEDULE = None
    ZONES = None

    manOverride = None
    schedOverrides = {}

    logger = None


    def __init__(self):
        """
        Instantiate the config object, and load in the config and schedule.
        """
	self.SCHEDULE = tosSched()
        self.ZONES = tosZones()
        self.LoadOverrides()
        self.logger = tosLogger()


    def LoadOverrides(self):
	"""
	Read-in (unpickle) the overrides.
	"""
        # manual override
	if os.path.exists(self.MAN_OVER_FILE):
	        f2 = file(self.MAN_OVER_FILE, 'rb')
		self.manOverride = pickle.load(f2)
		f2.close()
	else:
		self.manOverride = None

        # schedule overrides
        if os.path.exists(self.SCHED_OVER_FILE):
	        f2 = file(self.SCHED_OVER_FILE, 'rb')
		self.schedOverrides = pickle.load(f2)
		f2.close()
	else:
		self.schedOverrides = {}

    def GetScheduleOverrides(self):
        """
        This returns the entire list of dictionaries of schedule overrides.
        """
        return self.schedOverrides

    def GetManualOverride(self):
        """
        This returns the manual override. It will return either a dict, or False if none is set.
        """
        if self.manOverride is None:
            return False
        return self.manOverride

    def WriteScheduleOverrides(self):
        """
        Write out (pickle) the schedule overrides. This overwrites the previous file.
        """
        f2 = file(self.SCHED_OVER_FILE, 'wb')
        pickle.dump(self.schedOverrides, f2, False)
        f2.close()

    def WriteManualOverride(self, parent):
        """
        Write out (pickle) the manual override. This overwrites the previous file.
        """
        f2 = file(self.MAN_OVER_FILE, 'wb')
        pickle.dump(self.manOverride, f2, False)
        f2.close()
        if self.manOverride is not None:
            start = time.strftime("%Y-%m-%dT%H%M%S", time.gmtime(self.manOverride["StartTS"]))
            end = time.strftime("%Y-%m-%dT%H%M%S", time.gmtime(self.manOverride["EndTS"]))
            temp = str(self.manOverride["Temp"])
            self.logger.log(parent, 5, "Committed MANUAL OVERRIDE start at "+start+" end at "+end+" temp: "+temp)
        else:
            self.logger.log(parent, 5, "Removed MANUAL OVERRIDE.")

    def SetManOverride(self, parent, startTS, endTS, tempF, HVACmode, creator, note):
        """
        Sets a manual override. Usually executed immediately.

        @param parent (class/method reference) - reference to parent for logging purposes
        @param startTS (int) - timestamp for start
        @param endTS (int) - timestamp for end, or None to end before next scheduled task.
        @param tempF (float) - temp (F) to maintain.
        @param HVACmode (int) - the HVAC mode
        @param creator (string) - who added it?
        @param note (string) - a note

        TODO:: Manual overrides always use zone 1, zoneMode 4, tempMode 1
        """
        self.manOverride = {"StartTS": startTS, "EndTS": endTS, "Temp": tempF, "createdTS": time.time(), "HVACmode": HVACmode, "createdBy": creator, "note": note}
        self.logger.log(parent, 5, "Created MANUAL OVERRIDE, start="+str(startTS)+", end="+str(endTS)+",tempF="+str(tempF)+",HVACmode="+str(HVACmode)+",creator="+creator+",note="+note)

    def RemoveManOverride(self):
        """
        Removes the manual override.
        """
        self.manOverride = None
